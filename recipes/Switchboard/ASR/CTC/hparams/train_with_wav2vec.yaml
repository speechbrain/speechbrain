# ################################
# Model: wav2vec2 + DNN + CTC
# Augmentation: SpecAugment
# Authors: Titouan Parcollet 2021, Dominik Wagner 2022
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1312
__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]
output_folder: !ref results/wav2vec2_large_ctc/<seed>
output_wer_folder: !ref <output_folder>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# URL for the biggest Fairseq english wav2vec2 model.
wav2vec2_hub: facebook/wav2vec2-large-lv60

# Data files
# Set the local path to the Switchboard dataset (e.g. /nfs/data/swbd) here
data_folder: !PLACEHOLDER

# We remove utterances longer than x seconds to save some memory
# When set to 15 seconds, a tiny portion (31 of 192k) utterances
# will be removed from the train set.
# This allows for training with batch_size=4 on 40GB VRAM.
# Set to anything > 28 seconds to include all utterances.
# The longest utterance in the test set is 15.51 seconds.
# The longest utterance in the train set is 27.97 seconds.
avoid_if_longer_than: 15.52

splits: [train, dev]
split_ratio: [99, 1]
skip_prep: False
# The Fisher corpus is only used for Tokenizer training here
add_fisher_corpus: True
# Remove optional/deletable parts of the transcript
normalize_words: True
train_tokenizer_csv: !ref <output_folder>/train_lm.csv
# Maximum number of times the same utterance is allowed to appear
# in the training data
max_utt: 300
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/dev.csv
# The test data is split into the full test set (test.csv),
# the Switchboard portion of the data (test_swbd.csv),
# and the Callhome portion of the data (test_callhome.csv).
test_csv:
  - !ref <output_folder>/test_swbd.csv
  - !ref <output_folder>/test_callhome.csv
  - !ref <output_folder>/test.csv

####################### Training Parameters ####################################
number_of_epochs: 30
lr: 1.0
lr_wav2vec: 0.0001
sorting: ascending
precision: fp32 # bf16, fp16 or fp32
sample_rate: 16000
ckpt_interval_minutes: 30  # save checkpoint every N min

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
batch_size: 4
test_batch_size: 2

dataloader_options:
  batch_size: !ref <batch_size>
  num_workers: 6
test_dataloader_options:
  batch_size: !ref <test_batch_size>
  num_workers: 6

# BPE parameters
token_type: unigram  # ["unigram", "bpe", "char"]
character_coverage: 1.0

####################### Model Parameters #######################################
wav2vec_output_dim: 1024
dnn_neurons: 1024
freeze_wav2vec: False
dropout: 0.15

# Outputs
output_neurons: 1000  # BPE size, index(blank/eos/bos) = 0

# Decoding parameters
# Be sure that the bos and eos index match with the BPEs ones
blank_index: 0
bos_index: 1
eos_index: 2

# Decoding parameters
test_searcher: !name:speechbrain.decoders.CTCBeamSearcher
beam_size: 143
beam_prune_logp: -12.0
token_prune_min_logp: -1.2
prune_history: True
topk: 1
alpha: 0.8
beta: 1.2
# can be downloaded from here https://www.openslr.org/11/ or trained with kenLM
# It can either be a .bin or .arpa ; note: .arpa is much slower at loading
# If you don't want to use an LM, comment it out or set it to null
kenlm_model_path: null

#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

############################## Augmentations ###################################

# Speed perturbation
speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
  orig_freq: !ref <sample_rate>
  speeds: [95, 100, 105]

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
  drop_freq_low: 0
  drop_freq_high: 1
  drop_freq_count_low: 1
  drop_freq_count_high: 3
  drop_freq_width: 0.05

# Time drop: randomly drops a number of temporal chunks.
drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
  drop_length_low: 1000
  drop_length_high: 2000
  drop_count_low: 1
  drop_count_high: 5

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
  concat_original: True
  min_augmentations: 3
  max_augmentations: 3
  augment_prob: 1.0
  augmentations: [
    !ref <speed_perturb>,
    !ref <drop_freq>,
    !ref <drop_chunk>]

############################## Models ##########################################

enc: !new:speechbrain.nnet.containers.Sequential
  input_shape: [null, null, !ref <wav2vec_output_dim>]
  linear1: !name:speechbrain.nnet.linear.Linear
    n_neurons: !ref <dnn_neurons>
    bias: True
  bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation: !new:torch.nn.LeakyReLU
  drop: !new:torch.nn.Dropout
    p: !ref <dropout>
  linear2: !name:speechbrain.nnet.linear.Linear
    n_neurons: !ref <dnn_neurons>
    bias: True
  bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation2: !new:torch.nn.LeakyReLU
  drop2: !new:torch.nn.Dropout
    p: !ref <dropout>
  linear3: !name:speechbrain.nnet.linear.Linear
    n_neurons: !ref <dnn_neurons>
    bias: True
  bn3: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation3: !new:torch.nn.LeakyReLU

wav2vec2: !new:speechbrain.integrations.huggingface.wav2vec2.Wav2Vec2
  source: !ref <wav2vec2_hub>
  output_norm: True
  freeze: !ref <freeze_wav2vec>
  save_path: !ref <save_folder>/wav2vec2_checkpoint

#####
# Uncomment this block if you prefer to use a Fairseq pretrained model instead
# of a HuggingFace one. Here, we provide an URL that is obtained from the
# Fairseq github for the multilingual XLSR.
#
# wav2vec2_url: https://dl.fbaipublicfiles.com/fairseq/wav2vec/xlsr_53_56k.pt
# wav2vec2: !new:speechbrain.lobes.models.fairseq_wav2vec.FairseqWav2Vec2
#    pretrained_path: !ref <wav2vec2_url>
#    output_norm: True
#    freeze: False
#    save_path: !ref <save_folder>/wav2vec2_checkpoint/model.pt
#####

ctc_lin: !new:speechbrain.nnet.linear.Linear
  input_size: !ref <dnn_neurons>
  n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
  apply_log: True

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
  blank_index: !ref <blank_index>

modules:
  wav2vec2: !ref <wav2vec2>
  enc: !ref <enc>
  ctc_lin: !ref <ctc_lin>

model: !new:torch.nn.ModuleList
  - [!ref <enc>, !ref <ctc_lin>]
model_opt_class: !name:torch.optim.Adadelta
  lr: !ref <lr>
  rho: 0.95
  eps: 1.e-8

wav2vec_opt_class: !name:torch.optim.Adam
  lr: !ref <lr_wav2vec>

lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
  initial_value: !ref <lr>
  improvement_threshold: 0.0025
  annealing_factor: 0.8
  patient: 0

lr_annealing_wav2vec: !new:speechbrain.nnet.schedulers.NewBobScheduler
  initial_value: !ref <lr_wav2vec>
  improvement_threshold: 0.0025
  annealing_factor: 0.9
  patient: 0

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    wav2vec2: !ref <wav2vec2>
    model: !ref <model>
    scheduler_model: !ref <lr_annealing_model>
    scheduler_wav2vec: !ref <lr_annealing_wav2vec>
    counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
  split_tokens: True

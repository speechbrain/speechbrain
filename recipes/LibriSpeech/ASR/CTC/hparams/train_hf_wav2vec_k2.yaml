# ################################
# Model: wav2vec2 + DNN + CTC + LM (k2)
# Augmentation: SpecAugment
#
# This recipe trains a wav2vec2 model with a DNN and DWFST-based CTC loss.
# To use this recipe you need to have the following:
#  - A folder with the LibriSpeech dataset (see `datafolder`)
#  - A folder with a small, and (optionally) a big LM (see `lm_dir`)
#    These can be downloaded in ARPA format from: http://www.openslr.org/resources/11/.
#  - A working installation of k2 (and kaldilm if you want to use ARPA LMs).
#
# Authors: Zeyu Zhao 2023
#          Georgios Karakasidis 2023
#          Pierre Champion 2023
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1111
__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]
output_folder: !ref results/train_wav2vec2_char_k2/<seed>
output_wer_folder: !ref <output_folder>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# URL for the biggest Fairseq english wav2vec2 model.
wav2vec2_hub: facebook/wav2vec2-large-960h-lv60-self
wav2vec2_folder: !ref <save_folder>/wav2vec2_checkpoint

# Data files
data_folder: !PLACEHOLDER # e,g./path/to/LibriSpeech
# noise/ris dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
dev_splits: ["dev-clean", "dev-other"]
test_splits: ["test-clean", "test-other"]
skip_prep: False
ckpt_interval_minutes: 25 # save checkpoint every N min
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/dev-clean.csv
test_csv:
   - !ref <output_folder>/test-clean.csv
   - !ref <output_folder>/test-other.csv
   - !ref <output_folder>/dev-clean.csv
   - !ref <output_folder>/dev-other.csv

# For k2 CTC training
lang_dir: !ref <output_folder>/lang
vocab_file: !ref <data_folder>/librispeech-vocab.txt
sil_prob: 0.
add_word_boundary: True
# For k2 decoding
test_search_beam: 32
# Beam size (for decoding)
test_output_beam: 8
test_min_active_state: 300
test_max_active_state: 3000
# Acoustic scale (multiplied by the log probs)
ac_scale: 1.5
compose_HL_with_G: False
# 1best or whole-lattice-rescoring
# decoding_method: whole-lattice-rescoring
decoding_method: 1best
# LM scale to be used for rescoring. Only used if rescoring
rescoring_lm_scale: 0.4
# This is where the 3gram and (optionally) 4gram LM are stored
# They can be in either ARPA or FST format. If the former, then
# the FST equivalent will be created in the same directory by
# using kaldilm.
lm_dir: !ref <output_folder>/lm
# The ARPA LM files are located under the lm_dir.
# - Use (recommended):
#     - 3-gram_sb.arpa
#     - 4-gram_sb.arpa
#     To downloads speechbrain pretrained models (trained on train-960+librispeech-lm-norm.txt, 214k words)
# - Use:
#    - 3-gram.arpa
#    - 3-gram.pruned.1e-7.arpa
#    - 3-gram.pruned.3e-7.arpa
#    - 4-gram.arpa
#    To downloads http://www.openslr.org/resources/11/ pretrained models (trained on librispeech-lm-norm.txt, 200k words)
# - Use another name for a model you trained yourself.
#    If the arpa does not exist in the lm_dir, you'll need to train it yourself.
#    Please see LibriSpeech/LM/README.md for instructions.
# Using one of the above name will automatically download the corresponding model.
# You can specify a different name, but you'll need to make sure the file exists in the lm_dir.
# Make sure to use enough RAM and CPUs as the conversion to FST can be quite demanding.
G_arpa: 3-gram_sb.arpa
G_rescoring_arpa: 4-gram_sb.arpa
# caching: False

# Training parameters
number_of_epochs: 1
lr: 0.9
lr_wav2vec: 0.0001
sorting: ascending  # only ascending and descending are supported currently
precision: fp32
sample_rate: 16000

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 3 per GPU to fit 32GB of VRAM
batch_size: 6
test_batch_size: 1
num_workers: 10

# Dataloader options
train_dataloader_opts:
   batch_size: !ref <batch_size>
   num_workers: !ref <num_workers>

valid_dataloader_opts:
   batch_size: !ref <batch_size>
   num_workers: !ref <num_workers>

test_dataloader_opts:
   batch_size: !ref <test_batch_size>
   num_workers: !ref <num_workers>

# Model parameters
activation: !name:torch.nn.LeakyReLU
dnn_layers: 2
dnn_neurons: 1024
freeze_wav2vec: True

# Outputs
output_neurons: 30  # BPE size, index(blank/eos/bos) = 0

#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>

speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
   orig_freq: !ref <sample_rate>
   speeds: [95, 100, 105]

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq_low: 0  # Min frequency band dropout probability
drop_freq_high: 1  # Max frequency band dropout probability
drop_freq_count_low: 1  # Min number of frequency bands to drop
drop_freq_count_high: 3  # Max number of frequency bands to drop
drop_freq_width: 0.05  # Width of frequency bands to drop

drop_freq: !new:speechbrain.augment.time_domain.DropFreq
   drop_freq_low: !ref <drop_freq_low>
   drop_freq_high: !ref <drop_freq_high>
   drop_freq_count_low: !ref <drop_freq_count_low>
   drop_freq_count_high: !ref <drop_freq_count_high>
   drop_freq_width: !ref <drop_freq_width>

# Time drop: randomly drops a number of temporal chunks.
drop_chunk_count_low: 1  # Min number of audio chunks to drop
drop_chunk_count_high: 5  # Max number of audio chunks to drop
drop_chunk_length_low: 1000  # Min length of audio chunks to drop
drop_chunk_length_high: 2000  # Max length of audio chunks to drop

drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
   drop_length_low: !ref <drop_chunk_length_low>
   drop_length_high: !ref <drop_chunk_length_high>
   drop_count_low: !ref <drop_chunk_count_low>
   drop_count_high: !ref <drop_chunk_count_high>

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
   parallel_augment: False
   repeat_augment: 1
   shuffle_augmentations: False
   min_augmentations: 4
   max_augmentations: 4
   augment_prob: 1.0
   augmentations: [
      !ref <speed_perturb>,
      !ref <drop_freq>,
      !ref <drop_chunk>]

enc: !new:speechbrain.lobes.models.VanillaNN.VanillaNN
   input_shape: [null, null, 1024]
   activation: !ref <activation>
   dnn_blocks: !ref <dnn_layers>
   dnn_neurons: !ref <dnn_neurons>

wav2vec2: !new:speechbrain.integrations.huggingface.Wav2Vec2
   source: !ref <wav2vec2_hub>
   output_norm: True
   freeze: !ref <freeze_wav2vec>
   save_path: !ref <wav2vec2_folder>

#####
# Uncomment this block if you prefer to use a Fairseq pretrained model instead
# of a HuggingFace one. Here, we provide an URL that is obtained from the
# Fairseq github for the multilingual XLSR.
#
#wav2vec2_url: https://dl.fbaipublicfiles.com/fairseq/wav2vec/wav2vec_vox_960h_pl.pt
#wav2vec2: !new:speechbrain.lobes.models.fairseq_wav2vec.FairseqWav2Vec2
#    pretrained_path: !ref <wav2vec2_url>
#    output_norm: True
#    freeze: False
#    save_path: !ref <save_folder>/wav2vec2_checkpoint/model.pt

ctc_lin: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dnn_neurons>
   n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

ctc_cost: !name:speechbrain.k2_integration.losses.ctc_k2
   reduction: mean
   beam_size: 10

modules:
   wav2vec2: !ref <wav2vec2>
   enc: !ref <enc>
   ctc_lin: !ref <ctc_lin>

model: !new:torch.nn.ModuleList
   - [!ref <enc>, !ref <ctc_lin>]

model_opt_class: !name:torch.optim.Adadelta
   lr: !ref <lr>
   rho: 0.95
   eps: 1.e-8

wav2vec_opt_class: !name:torch.optim.Adam
   lr: !ref <lr_wav2vec>

lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr>
   improvement_threshold: 0.0025
   annealing_factor: 0.8
   patient: 0

lr_annealing_wav2vec: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr_wav2vec>
   improvement_threshold: 0.0025
   annealing_factor: 0.9
   patient: 0

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
   checkpoints_dir: !ref <save_folder>
   recoverables:
      wav2vec2: !ref <wav2vec2>
      model: !ref <model>
      scheduler_model: !ref <lr_annealing_model>
      scheduler_wav2vec: !ref <lr_annealing_wav2vec>
      counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
   split_tokens: True
